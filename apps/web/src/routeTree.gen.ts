/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as RoomRouteImport } from './routes/room'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as MyRoomsRouteImport } from './routes/my-rooms'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RoomRoomIdRouteImport } from './routes/room_.$roomId'
import { Route as AuthAuthViewRouteImport } from './routes/auth.$authView'
import { Route as AccountAccountViewRouteImport } from './routes/account.$accountView'
import { Route as MyRoomsRoomIdIssuesRouteImport } from './routes/my-rooms_.$roomId.issues'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoute = RoomRouteImport.update({
  id: '/room',
  path: '/room',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const MyRoomsRoute = MyRoomsRouteImport.update({
  id: '/my-rooms',
  path: '/my-rooms',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoomIdRoute = RoomRoomIdRouteImport.update({
  id: '/room_/$roomId',
  path: '/room/$roomId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/auth/$authView',
  path: '/auth/$authView',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountAccountViewRoute = AccountAccountViewRouteImport.update({
  id: '/account/$accountView',
  path: '/account/$accountView',
  getParentRoute: () => rootRouteImport,
} as any)
const MyRoomsRoomIdIssuesRoute = MyRoomsRoomIdIssuesRouteImport.update({
  id: '/my-rooms_/$roomId/issues',
  path: '/my-rooms/$roomId/issues',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/my-rooms': typeof MyRoomsRoute
  '/privacy': typeof PrivacyRoute
  '/room': typeof RoomRoute
  '/terms': typeof TermsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/room/$roomId': typeof RoomRoomIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/my-rooms/$roomId/issues': typeof MyRoomsRoomIdIssuesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/my-rooms': typeof MyRoomsRoute
  '/privacy': typeof PrivacyRoute
  '/room': typeof RoomRoute
  '/terms': typeof TermsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/room/$roomId': typeof RoomRoomIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/my-rooms/$roomId/issues': typeof MyRoomsRoomIdIssuesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/my-rooms': typeof MyRoomsRoute
  '/privacy': typeof PrivacyRoute
  '/room': typeof RoomRoute
  '/terms': typeof TermsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/room_/$roomId': typeof RoomRoomIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/my-rooms_/$roomId/issues': typeof MyRoomsRoomIdIssuesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/my-rooms'
    | '/privacy'
    | '/room'
    | '/terms'
    | '/account/$accountView'
    | '/auth/$authView'
    | '/room/$roomId'
    | '/api/auth/$'
    | '/my-rooms/$roomId/issues'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/my-rooms'
    | '/privacy'
    | '/room'
    | '/terms'
    | '/account/$accountView'
    | '/auth/$authView'
    | '/room/$roomId'
    | '/api/auth/$'
    | '/my-rooms/$roomId/issues'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/my-rooms'
    | '/privacy'
    | '/room'
    | '/terms'
    | '/account/$accountView'
    | '/auth/$authView'
    | '/room_/$roomId'
    | '/api/auth/$'
    | '/my-rooms_/$roomId/issues'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  MyRoomsRoute: typeof MyRoomsRoute
  PrivacyRoute: typeof PrivacyRoute
  RoomRoute: typeof RoomRoute
  TermsRoute: typeof TermsRoute
  AccountAccountViewRoute: typeof AccountAccountViewRoute
  AuthAuthViewRoute: typeof AuthAuthViewRoute
  RoomRoomIdRoute: typeof RoomRoomIdRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  MyRoomsRoomIdIssuesRoute: typeof MyRoomsRoomIdIssuesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room': {
      id: '/room'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-rooms': {
      id: '/my-rooms'
      path: '/my-rooms'
      fullPath: '/my-rooms'
      preLoaderRoute: typeof MyRoomsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room_/$roomId': {
      id: '/room_/$roomId'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof RoomRoomIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/auth/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/$accountView': {
      id: '/account/$accountView'
      path: '/account/$accountView'
      fullPath: '/account/$accountView'
      preLoaderRoute: typeof AccountAccountViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-rooms_/$roomId/issues': {
      id: '/my-rooms_/$roomId/issues'
      path: '/my-rooms/$roomId/issues'
      fullPath: '/my-rooms/$roomId/issues'
      preLoaderRoute: typeof MyRoomsRoomIdIssuesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  MyRoomsRoute: MyRoomsRoute,
  PrivacyRoute: PrivacyRoute,
  RoomRoute: RoomRoute,
  TermsRoute: TermsRoute,
  AccountAccountViewRoute: AccountAccountViewRoute,
  AuthAuthViewRoute: AuthAuthViewRoute,
  RoomRoomIdRoute: RoomRoomIdRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  MyRoomsRoomIdIssuesRoute: MyRoomsRoomIdIssuesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
